import logging
from typing import Any

import requests
from aiogram import Bot, Router, types
from aiogram.dispatcher.middlewares.user_context import EventContext
from aiogram.enums import ParseMode
from aiogram.filters.command import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import CallbackQuery, ContentType, Message
from aiogram_dialog import Dialog, DialogManager, StartMode, Window
from aiogram_dialog.widgets.input import MessageInput
from aiogram_dialog.widgets.kbd import Back, Button, Cancel, Row, Select
from aiogram_dialog.widgets.text import Const, Format
from requests import HTTPError
from requests.exceptions import ConnectionError

import settings
from shared import AccessMiddleware, Role
from utils import compare_date_str_to_now, del_from_redis, slugify

router = Router()
router.message.middleware(AccessMiddleware(Role.STUDENT))


class SendHwSG(StatesGroup):
    hw_list = State()
    send_hw = State()


async def hw_list_getter(bot: Bot, event_context: EventContext, dialog_manager: DialogManager, **kwargs):
    '''–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª-–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∑ –¥–ª—è —Å–¥–∞—á–∏'''
    try:
        response = requests.get(settings.BACKEND_URL + "/timetable")
        response.raise_for_status()
    except ConnectionError as error:
        logging.error(error)
        await bot.send_message(chat_id=event_context.chat_id, text="–°–µ—Ä–≤–µ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω üòî\n"
                                                                   "–ù–∞–¥ —ç—Ç–∏–º —É–∂–µ —Ä–∞–±–æ—Ç–∞—é—Ç!\n\n–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ.")
        await dialog_manager.done()
        return
    except HTTPError as error:
        logging.error(error)
        await bot.send_message(chat_id=event_context.chat_id, text=f"–£–ø—Å, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫üò≥. "
                                                                   "–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ.")
        await dialog_manager.done()
        return

    tasks = response.json()
    opened_homeworks = []
    for task in tasks:
        if compare_date_str_to_now(task['start_date']) <= 0 <= compare_date_str_to_now(task['end_date']):
            opened_homeworks.append(task['id'])

    if not opened_homeworks:
        await bot.send_message(chat_id=event_context.chat_id, text=f"–ù–µ—Ç—É –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∑ –¥–ª—è —Å–¥–∞—á–∏üëÄ")
        await dialog_manager.done()
        return

    return {
        'opened_homeworks': opened_homeworks
    }


async def on_homework_chosen(callback: CallbackQuery, widget: Any, dialog_manager: DialogManager, item_id: str):
    format_symbols = {
        1: "1Ô∏è‚É£",
        2: "2Ô∏è‚É£",
        3: "3Ô∏è‚É£",
        4: "4Ô∏è‚É£",
        5: "5Ô∏è‚É£"
    }
    dialog_manager.dialog_data['task_id'] = item_id
    await callback.message.answer(text=f'–í—ã–±—Ä–∞–Ω–æ –¥–∑: *{format_symbols[int(item_id)]}*', parse_mode=ParseMode.MARKDOWN_V2)
    await dialog_manager.next()


async def hw_handler(message: Message, message_input: MessageInput, dialog_manager: DialogManager):
    entities = message.entities or []
    hw_link = None
    for item in entities:
        if item.type == "url":
            hw_link = item.extract_from(message.text)
            break
    if hw_link is None:
        await message.answer(text="–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Å—ã–ª–∫–∏üòî.\n"
                                  "–û—Ç–ø—Ä–∞–≤—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –µ—â—ë —Ä–∞–∑.")
    else:
        try:
            response = requests.post(settings.BACKEND_URL + f"/{slugify(message.from_user.username)}/sendhw",
                                     data={
                                        'url': hw_link,
                                        'task': int(dialog_manager.dialog_data['task_id'])
                                     })
            response.raise_for_status()
        except ConnectionError as error:
            logging.error(error)
            await message.answer("–°–µ—Ä–≤–µ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω üòî\n–ù–∞–¥ —ç—Ç–∏–º —É–∂–µ —Ä–∞–±–æ—Ç–∞—é—Ç!\n\n–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ.")
            await dialog_manager.done()
            return
        except HTTPError as error:
            logging.error(error)
            await message.answer(f"–£–ø—Å, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫üò≥. –ù–∞–ø–∏—à–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ {settings.ADMIN}.")
            await dialog_manager.done()
            return

        await message.answer(text="–î–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æü•≥")
        await dialog_manager.done()


send_hw_dialog = Dialog(
    Window(
        Const("–í—ã–±–µ—Ä–∏ –Ω–æ–º–µ—Ä –¥–∑ –¥–ª—è —Å–¥–∞—á–∏ü´¥\n\n"
              "‚ùóÔ∏è –ø–æ–∫–∞ –¥–∑ –¥–æ—Å—Ç—É–ø–Ω–æ, –µ–≥–æ –º–æ–∂–Ω–æ –ø–µ—Ä–µ—Å–¥–∞–≤–∞—Ç—å –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ —Ä–∞–∑"),
        Select(
            Format("{item}"),
            id="hw_id",
            item_id_getter=lambda x: x,
            items="opened_homeworks",
            on_click=on_homework_chosen
        ),
        Cancel(Const("–û—Ç–º–µ–Ω–∞")),
        state=SendHwSG.hw_list,
        getter=hw_list_getter
    ),
    Window(
        Const(text=
              "–û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—Éüîó –Ω–∞ –¥–∑.\n\n"
              "‚ùóÔ∏è –ï—Å–ª–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ —Ç—ã –æ—Ç–ø—Ä–∞–≤–∏—à—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Å—ã–ª–æ–∫,\n"
              "—Ç–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –±—É–¥–µ—Ç –≤—ã–±—Ä–∞–Ω–∞ –ø–µ—Ä–≤–∞—è\n\n"
              "–ü—Ä–∏–º–µ—Ä:\n"
              "<i>–ü—Ä–∏–≤–µ—Ç! –í–æ—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ –º–æ—ë –ø–µ—Ä–≤–æ–µ –¥–∑</i>\n"
              "<i>https://figmalink1</i> - –ø–µ—Ä–≤–∞—è —Å—Å—ã–ª–∫–∞ –ø–æ–π–¥—ë—Ç –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É\n"
              "<i>https://figmalink2</i> - –≤—Ç–æ—Ä–∞—è –∫–∞–Ω–µ—Ç –≤ –±–µ–∑–¥–Ω—É ‚òπÔ∏è\n"
              "<i>–í—Ä–æ–¥–µ –≤—Å—ë‚ò∫Ô∏è</i>"
              ),
        Row(
            Back(Const("–ù–∞–∑–∞–¥")),
            Cancel(Const("–û—Ç–º–µ–Ω–∞"))
        ),
        MessageInput(hw_handler, content_types=[ContentType.TEXT]),
        state=SendHwSG.send_hw,
        parse_mode=ParseMode.HTML
    ),
)

router.include_router(send_hw_dialog)


class LeaveStates(StatesGroup):
    confirm = State()


async def confirm_leave(callback: CallbackQuery, button: Button, dialog_manager: DialogManager):
    username = callback.from_user.username
    try:
        response = requests.delete(settings.BACKEND_URL + f"/delmember/{slugify(username)}")
        response.raise_for_status()
    except ConnectionError as error:
        logging.error(error)
        await callback.message.answer(f"–°–µ—Ä–≤–µ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω üòî\n\n"
                                      f"–ù–∞–¥ —ç—Ç–∏–º —É–∂–µ —Ä–∞–±–æ—Ç–∞—é—Ç!\n\n–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ.")
        await dialog_manager.done()
        return
    except HTTPError:
        await callback.message.answer(f"–£–ø—Å, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫üò≥. –ù–∞–ø–∏—à–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, {settings.ADMIN}.")
        await dialog_manager.done()
        return

    del_from_redis(username)
    await callback.message.answer(f"–¢—ã –±—ã–ª –∏—Å–∫–ª—é—á—ë–Ω –∏–∑ –∫—É—Ä—Å–∞ –ø–æ —Ñ–∏–≥–º–µ.", parse_mode=ParseMode.HTML)
    await dialog_manager.done()


leave_dialog = Dialog(
    Window(
        Format("‚ö†Ô∏è<b>DANGER ZONE</b>‚ö†Ô∏è\n\n"
               "–¢—ã —Ç–æ—á–Ω–æ —Ö–æ—á–µ—à—å –ø–æ–∫–∏–Ω—É—Ç—å –∫—É—Ä—Å‚ùì\n\n"
               "‚ùóÔ∏è <b>–¢—ã –±—É–¥–µ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª—ë–Ω –±–µ–∑\n –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è</b>üò•"),
        Button(Const("–î–∞"), id="confirm_yes", on_click=confirm_leave),
        Cancel(Const("–ù–µ—Ç")),
        state=LeaveStates.confirm,
        parse_mode=ParseMode.HTML
    )
)


router.include_router(leave_dialog)


@router.message(Command("sendhw"))
async def start_sending_hw_dialog(message: types.Message, dialog_manager: DialogManager):
    await dialog_manager.start(SendHwSG.hw_list, mode=StartMode.RESET_STACK)


@router.message(Command("leave"))
async def leave_course(message: types.Message, dialog_manager: DialogManager):
    await dialog_manager.start(LeaveStates.confirm, mode=StartMode.RESET_STACK)
